stage<IMAGE_SIZE>x<IMAGE_SIZE>: # IMAGE_SIZE = 4, 8, 16, 32, 64, 128, 256, 512
  supervisor:
    args:
      version: <VERSION>
      name: <NAME>
      checkpoint: <CHECKPOINT>
  data:
    train:
      transforms:
        - [torchvision.transforms, CenterCrop, {size: [512, 512]}]
        - [torchvision.transforms, Resize, {size: [<IMAGE_SIZE>, <IMAGE_SIZE>]}]
        - [torchvision.transforms, ToTensor, {}]
        - [torchvision.transforms, RandomHorizontalFlip, {p: 0.5}]
        - [torchvision.transforms, Normalize, {mean: [.5, .5, .5], std: [.5, .5, .5]}]
      dataloader:
        args:
          batch_size: <BATCH_SIZE>
  models:
    netG:
      args: 
        latent_channels: <LATENT_CHANNELS_NET_G>
    netD:
      args: 
          latent_channels: <LATENT_CHANNELS_NET_D>
  optimizers:
  loss:
    lossG:
      - [1.0, losses.generator_loss, MeanDiscriminatorLoss, {}]
    lossD:
      - [<WD>, losses.discriminator_loss, WassersteinDistance, {scale: <SCALE_WD>}]
      - [<GP>, losses.discriminator_loss, GradientPenalty, {}]
  optG:
    module: torch.optim
    name: Adam
    target: netG
    args:
      lr: <LEARNING_RATE_G>
      betas: [<BETA_1_G>, <BETA_2_G>]
  optD:
    module: torch.optim
    name: Adam
    target: netD
    args:
      lr: <LEARNING_RATE_D>
      betas: [<BETA_1_D>, <BETA_2_D>]
  score: 
    - [1.0, <SCORE_NAME>]
  hooks:
    - [hooks.load, Load, {targets: {netG: generator.pkl, netD: discriminator.pkl}, dir: d:checkpoints/<LOAD_NAME>/<LOAD_VERSION>/best}]
    - [hooks.load, Resume, {targets: {netG: generator.pkl, netD: discriminator.pkl, optG: optimizer_generator.pkl, optD: optimizer_discriminator.pkl, meta: meta.json}, dir: latest}]
    - [hooks.save, SaveToDir, {every: <EVERY>, targets: {netG: generator.pkl, netD: discriminator.pkl, optG: optimizer_generator.pkl, optD: optimizer_discriminator.pkl, meta: meta.json}, dir: latest}]
    - [hooks.save, SaveAll, {every: <EVERY>, targets: {netG: generator.pkl, netD: discriminator.pkl, optG: optimizer_generator.pkl, optD: optimizer_discriminator.pkl, meta: meta.json}}]
    # - [hooks.gan_hooks, UnfreezLayers, {after: 10, targets: [netG, netD]}]
    - [hooks.gan_hooks, TensorboardGenerateImageSample, {every: <EVERY>, target_model: netG, samples: 64}]
    - [hooks.gan_hooks, TensorboardScalarData, {every: <EVERY>, targets: [loss_disc,  loss_gen]}]
    - [hooks.gan_hooks, TensorboardFID, {every: <EVERY>, generator: netG, data: train, samples: <SAMPLES>, name: <SCORE_NAME>}]
    - [hooks.gan_hooks, TensorboardLFDS, {every: <EVERY>, encoder: netD, generator: netG, data: train, samples: <SAMPLES>}]
    - [hooks.gan_hooks, TensorboardImageStatsCosineSimilarity, {every: <EVERY>, generator: netG, data: train, samples: <SAMPLES>}]
    - [hooks.save, SaveBest, {every: <EVERY>, targets: {netG: generator.pkl, netD: discriminator.pkl, optG: optimizer_generator.pkl, optD: optimizer_discriminator.pkl, meta: meta.json}}]
    - [hooks.gan_hooks, ConsoleStats, {every: 1, targets: [loss_disc,  loss_gen]}]
